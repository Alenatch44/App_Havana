// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentInsKrisBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final ImageView imageKris;

  @NonNull
  public final TextView textInfo;

  @NonNull
  public final TextView textInfoKrisIns1;

  @NonNull
  public final TextView textInfoKrisIns2;

  @NonNull
  public final TextView textKrisIns;

  private FragmentInsKrisBinding(@NonNull ScrollView rootView, @NonNull ImageView imageKris,
      @NonNull TextView textInfo, @NonNull TextView textInfoKrisIns1,
      @NonNull TextView textInfoKrisIns2, @NonNull TextView textKrisIns) {
    this.rootView = rootView;
    this.imageKris = imageKris;
    this.textInfo = textInfo;
    this.textInfoKrisIns1 = textInfoKrisIns1;
    this.textInfoKrisIns2 = textInfoKrisIns2;
    this.textKrisIns = textKrisIns;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentInsKrisBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentInsKrisBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_ins_kris, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentInsKrisBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.image_kris;
      ImageView imageKris = ViewBindings.findChildViewById(rootView, id);
      if (imageKris == null) {
        break missingId;
      }

      id = R.id.text_info;
      TextView textInfo = ViewBindings.findChildViewById(rootView, id);
      if (textInfo == null) {
        break missingId;
      }

      id = R.id.text_info_kris_ins_1;
      TextView textInfoKrisIns1 = ViewBindings.findChildViewById(rootView, id);
      if (textInfoKrisIns1 == null) {
        break missingId;
      }

      id = R.id.text_info_kris_ins_2;
      TextView textInfoKrisIns2 = ViewBindings.findChildViewById(rootView, id);
      if (textInfoKrisIns2 == null) {
        break missingId;
      }

      id = R.id.text_kris_ins;
      TextView textKrisIns = ViewBindings.findChildViewById(rootView, id);
      if (textKrisIns == null) {
        break missingId;
      }

      return new FragmentInsKrisBinding((ScrollView) rootView, imageKris, textInfo,
          textInfoKrisIns1, textInfoKrisIns2, textKrisIns);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
